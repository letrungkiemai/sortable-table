{"version":3,"sources":["model/useAxios.ts","components/SortableTable.tsx","components/TableContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useAxios","url","useState","data","setData","loading","setLoading","error","setError","useEffect","a","async","axios","get","response","fetchUrl","StyledTable","styled","div","SortableTable","config","sortConfig","setSortConfig","sortedItems","useMemo","sortedData","sort","b","key","toString","direction","requestSort","useSortableData","quotes","getClassNamesFor","name","undefined","type","onClick","className","map","p","i","author","en","numberOfVotes","rating","source","TableContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58bdfbbb.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\nimport { useState, useEffect } from \"react\";\n\nconst useAxios = (\n  url: string\n): { data: any; loading: boolean; error: AxiosResponse | null } => {\n  const [data, setData] = useState<AxiosResponse | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<AxiosResponse | null>(null);\n  async function fetchUrl() {\n    try {\n      const response: AxiosResponse | null = await axios.get(url);\n      setData(response?.data);\n    } catch (e) {\n      setError(e);\n    }\n    setLoading(false);\n  }\n  useEffect(() => {\n    fetchUrl();\n  }, [url]);\n  return { data, loading, error };\n};\n\nexport { useAxios };\n","import React, { useState, useMemo } from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledTable = styled.div`\n  width: 1720px;\n\n  caption {\n    margin-bottom: 20px;\n  }\n\n  table {\n    margin-top: 20px;\n    margin-left: 20px;\n    border: 1px solid black;\n    width: 100%;\n    border-spacing: 0;\n  }\n\n  th,\n  td {\n    width: 200px;\n    border: 1px solid black;\n\n    &:nth-child(2) {\n      width: 500px;\n    }\n    &:last-child {\n      width: 600px;\n    }\n  }\n\n  thead > tr {\n    position: relative;\n    display: block;\n  }\n\n  thead button.ascending::after {\n    content: \"👇\";\n    display: inline-block;\n    margin-left: 1em;\n  }\n\n  thead button.descending::after {\n    content: \"☝️\";\n    display: inline-block;\n    margin-left: 1em;\n  }\n\n  th > button {\n    outline: none;\n    background-color: transparent;\n    border: none;\n    width: 100%;\n\n    &:active {\n    }\n  }\n\n  tbody {\n    display: block;\n    height: auto;\n    overflow: auto;\n  }\n\n  tbody > tr {\n    display: block;\n  }\n`;\n\n/** CUSTOM HOOK */\nconst useSortableData = (data, config = null) => {\n  const [sortConfig, setSortConfig] = useState<any>(config);\n  const sortedItems = useMemo(() => {\n    let sortedData = [...data];\n    if (sortConfig !== null) {\n      sortedData.sort((a, b) => {\n        if (!a[sortConfig.key] && !b[sortConfig.key]) return 0;\n        if (!a[sortConfig.key])\n          return sortConfig.direction === \"ascending\" ? -1 : 1;\n        if (!b[sortConfig.key])\n          return sortConfig.direction === \"ascending\" ? 1 : -1;\n\n        if (a[sortConfig.key]?.toString() < b[sortConfig.key]?.toString()) {\n          return sortConfig.direction === \"ascending\" ? -1 : 1;\n        }\n        if (a[sortConfig.key]?.toString() > b[sortConfig.key]?.toString()) {\n          return sortConfig.direction === \"ascending\" ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n\n    return sortedData;\n  }, [data, sortConfig]);\n\n  const requestSort = key => {\n    let direction = \"ascending\";\n    if (\n      sortConfig &&\n      sortConfig.key === key &&\n      sortConfig.direction === \"ascending\"\n    ) {\n      direction = \"descending\";\n    }\n    setSortConfig({ key, direction });\n  };\n\n  return { data: sortedItems, requestSort, sortConfig };\n};\n\nconst SortableTable = ({ quotes }) => {\n  const { data, requestSort, sortConfig } = useSortableData(quotes);\n\n  const getClassNamesFor = name => {\n    if (!sortConfig) {\n      return;\n    }\n    return sortConfig.key === name ? sortConfig.direction : undefined;\n  };\n\n  const table = (\n    <StyledTable>\n      <table>\n        <caption>Programming quotes</caption>\n        <thead>\n          <tr>\n            <th>\n              <button\n                type=\"button\"\n                onClick={() => requestSort(\"author\")}\n                className={getClassNamesFor(\"author\")}\n              >\n                Author\n              </button>\n            </th>\n            <th>\n              <button\n                type=\"button\"\n                onClick={() => requestSort(\"en\")}\n                className={getClassNamesFor(\"en\")}\n              >\n                Quotes\n              </button>\n            </th>\n            <th>\n              <button\n                type=\"button\"\n                onClick={() => requestSort(\"numberOfVotes\")}\n                className={getClassNamesFor(\"numberOfVotes\")}\n              >\n                Votes\n              </button>\n            </th>\n            <th>\n              <button\n                type=\"button\"\n                onClick={() => requestSort(\"rating\")}\n                className={getClassNamesFor(\"rating\")}\n              >\n                Ratings\n              </button>\n            </th>\n            <th>\n              <button\n                type=\"button\"\n                onClick={() => requestSort(\"source\")}\n                className={getClassNamesFor(\"source\")}\n              >\n                Source\n              </button>\n            </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {data.map((p: any, i: number) => (\n            <tr key={i}>\n              <td>{p.author}</td>\n              <td>{p.en}</td>\n              <td>{p.numberOfVotes}</td>\n              <td>{p.rating}</td>\n              <td>{p.source}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </StyledTable>\n  );\n\n  return table;\n};\n\nexport default SortableTable;\n","import React from \"react\";\nimport { useAxios } from \"../model/useAxios\";\nimport SortableTable from \"./SortableTable\";\n\nconst TableContainer = () => {\n  const { data, loading, error } = useAxios(\n    \"https://programming-quotes-api.herokuapp.com/quotes\"\n  );\n\n  return data ? (\n    <SortableTable quotes={data}></SortableTable>\n  ) : loading ? (\n    <div>loading...</div>\n  ) : (\n    <div>{error}</div>\n  );\n};\n\nexport default TableContainer;\n","import React from \"react\";\nimport \"./App.css\";\nimport TableContainer from \"./components/TableContainer\";\n\nconst App: React.FC = () => {\n  return <TableContainer></TableContainer>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}